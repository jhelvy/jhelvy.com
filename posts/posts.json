[
  {
    "path": "posts/2021-09-18-choice-based-conjoint-surveys-in-r-with-formr/",
    "title": "Choice-based conjoint surveys in R with formr",
    "description": "A how-to guide for using R to design and implement choice-based conjoint surveys using formr.org",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-09-18",
    "categories": [
      "R",
      "tutorial",
      "conjoint"
    ],
    "contents": "\n\nContents\nOverview\nCreating the surveys\nDefining the choice questions\nImplementing the choice questions\nButtons versus tables\nImplementing the surveys in formr\nTime stamps \nPreview and check\nGetting the data\n\nformr.org is a flexible platform for making surveys using . In this post, I‚Äôm going to show you one approach for using formr to create a choice-based conjoint survey (I‚Äôm going to assume that you know what conjoint surveys are, but if not take a look at this quick introduction).\nThroughout this post, I will use a demo survey about people‚Äôs preferences for apples with three attributes: type, price, and freshness.1\nYou can view the live demo survey here, and all files used to create the survey are on this GitHub repo.\nOverview\nIf you‚Äôve never used formr.org before, the video on this page offers a 5 minute conceptual overview followed by ~40 minute demo covering the basics.\nEvery formr survey is implemented in a spreadsheet. I highly recommend using Google Sheets for this because\nformr has a button on the admin page to quickly re-load your Google Sheet (otherwise you have to upload a new .xlsx file any time you make changes), and\nIt‚Äôs easier for collaborating and managing different versions.\nEach ‚Äúsurvey‚Äù (each Google Sheet) must be loaded into a ‚ÄúRun‚Äù to make the survey live. Most runs include multiple surveys chained together to control complex logic, like filtering out a respondent based on their response to a question.\nFor this demo, I have designed the run as a combination of three surveys (links below go to each respective Google Sheet):\nPart 1: Intro and target population screen out\nPart 2: Conjoint choice questions\nPart 3: Demographic and other questions\nDon‚Äôt worry about what‚Äôs in each sheet just yet - we‚Äôll get to that.\nCreating the surveys\nI find it much easier to design my surveys using .Rmd files (one .Rmd file per survey). I can knit each .Rmd file to a html page to preview the look and feel of my survey without having to use formr at all. This also provides a way to easily print out the whole survey content as a PDF (e.g.¬†open the survey in your browser, then print the page to a PDF). When I‚Äôm happy with how things look, I then carefully copy-paste the content over into separate rows in a Google Sheet.\nFor this demo, I designed the questions in each part using the following three .Rmd files in the ‚Äúsurvey‚Äù folder of the GitHub repo:\n.Rmd file\nGoogle Sheet\np1-intro.Rmd\nappleConjoint_p1\np2-choice-questions.Rmd\nappleConjoint_p2\np3-demos.Rmd\nappleConjoint_p3\nThe links in this table let you compare the .Rmd file with the corresponding Google Sheet. Most general content that I want to display to the respondent goes in the label column of the Google Sheet, and response options to questions go in the choice columns (for part 3, I put the choice options on a separate choices tab). Pay careful attention to the type column - this determines the nature of the row (e.g.¬†note just shows the label column content, mc is a multiple choice question, etc.). The calculate type rows allow me to run  code to generate and store objects that can be used across different pages in the survey (these values will also be available in the resulting survey data).\nDefining the choice questions\nThe central component of every conjoint survey is the set of randomized choice questions. To implement these in formr, you first need to define the set of choice questions you want to ask each respondent. I use the conjointTools package (which I developed üòÑ) to create these questions. The code to create the choice questions for this demo survey is in the make_choice_questions.R file in the repo.\nThe data frame of randomized choice questions is saved as the choice_questions.csv file. Once created, you‚Äôll need to host it somewhere on the web so that you can read it into your Google Sheet. For this demo, the file is hosted on the GitHub repo, but you can also upload your choice_questions.csv file inside your Run (see the ‚ÄúUpload Files‚Äù button on the left side menu), which will generate a unique url to the file.\nImplementing the choice questions\nI implement the choice questions in part two of my survey (the appleConjoint_p2 Google Sheet). To do this, I use the first few rows of the sheet to read in the choice_questions.csv file and make the following calculations:\nRandomly generate a respondentID by sampling from all possible respID values in the choice questions.\nCreate a new df data frame that includes only the rows for the specific respondentID.\nCreate a df_json object that converts the df data frame to JSON.\nThat last step is a bit of a hack, but the reason this is necessary is because each new page on formr is essentially a new  session, so every time you start a new page all your previous objects are no longer there and all your libraries need to be re-loaded. The only objects you have access to on separate pages are items that are stored in the resulting survey data (using the names assigned in the name column), so we have to ‚Äúserialize‚Äù the df object into one long JSON object so that we can access it later in other pages.\nOnce we have everything set up, we can then start defining choice questions. In each choice question row, the first thing I do is define the questions label and then write a code chunk to create multiple data frames to store the values to display for each alternative. For example, on row 10 of the appleConjoint_p2 Google Sheet, you can see the following code chunk under the question label:\n\n\nlibrary(dplyr)\nalts <- jsonlite::fromJSON(df_json) %>% \n  filter(qID == 1)\nalt1 <- alts %>% filter(altID == 1)\nalt2 <- alts %>% filter(altID == 2)\nalt3 <- alts %>% filter(altID == 3)\n\n\n\nIn this chunk, the alts data frame is created by converting the df_json object into a data frame and filtering for all alternatives for the first question. Then the alts data frame is broken into three more data frames (alt1, alt2, and alt3) which contain the information about each alternative. These data frames are then used to display information about each alternative. For example, the first alternative is defined using this code:\n\n**Option 1**\n\n<img src=`r alt1$image` width=100>\n\n**Type**: `r alt1$type`\n**Price**: $ `r alt1$price` / lb\n**Freshness**: `r alt1$freshness`\n\nI copy this code over to each alternative, adjusting the numbers for alternative 2 and 3. When rendered in formr, the three options looks like this:\n\n\nAnd that‚Äôs it! The nice thing about this approach is that the only thing I need to modify in these code chunks for the remaining choice questions is the question number used to define the alts data frame. Other than that, the code for the question label and the alternatives can be reused on the rest of the choice questions.\nButtons versus tables\nIn the example above, the conjoint choice questions are displayed as ‚Äúbuttons‚Äù where all the information for each alternative is shown as a button. This works particularly well for mobile phone applications where the user may need to scroll vertically to see each option.\nAn alternative is to use a tabular layout where each column represents an alternative and the row names explain the attribute. This takes a little manipulation to get it right, but the key concept is to use kable() to display the transpose of the alts data frame. I also use the wonderful kableExtra package to modify some of the table stying. If you want to see this version in practice, the survey link is here, and the Google Sheet with the configurtions for this is here.\n\n\nlibrary(dplyr)\nlibrary(kableExtra)\nalts <- jsonlite::fromJSON(df_json) %>%\n  filter(qID == 1) %>% \n  mutate(\n    price = paste(scales::dollar(price), \"/ lb\"),\n    image = paste0('<img src=\"', image, '\" width=100>')) %>% \n  # Make nicer attribute labels\n  select(\n    `Option:` = altID, \n    ` ` = image,\n    `Price:` = price, \n    `Type:` = type, \n    `Freshness:` = freshness)\nrow.names(alts) <- NULL # Drop row names\n\nkable(t(alts), escape = FALSE) %>% \n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\", \"condensed\"), \n    full_width = FALSE, \n    position = \"center\"\n  )\n\n\n\n\n\nImplementing the surveys in formr\nYou‚Äôll need to upload each Google Sheet survey into formr to convert them into surveys. Go to your admin page, click on ‚ÄúCreate Survey‚Äù, then import one of the Google Sheets. This creates one survey. On the left panel you can click ‚ÄúTest Survey‚Äù to preview it.\nOnce you have all three surveys loaded into formr, you can then assemble them into a ‚ÄúRun‚Äù by clicking on ‚ÄúRuns -> Create New Run‚Äù. Give the run a name, then add your survey to the run by clicking on the  icon. You‚Äôll want to add all three surveys, and then at the end add a stopping point by clicking the  icon. You can use other logic to control how the user navigates through the survey, such as a ‚ÄúSkip Forward‚Äù ( icon) to screen respondents out before letting them get to a later part of the survey.\nThe specific logic used in this demo is as follows:\nStart (part 1)\n  |\n  V\nCheck screen out question --> Screen out non-target respondents\n  |\n  V\nChoice questions (part 2)\n  |\n  V\nCheck choice responses --> Screen out respondents that chose \n  |                        all same responses\n  V\nFinal demographic and other questions (part 3)\n  |\n  V\nFinish\nNotice that there are two points where respondents can be screened out of the survey:\nAt the end of part 1, I ask a question to identify if the respondent is part of the target population I am interested in. This allows me to screen people out of the survey eary on before they get too far in if they‚Äôre not who I‚Äôm looking for. In this demo, I ask if they prefer the color Red or Blue and screen out people who chose Blue.\nAt the end of part 2, I compute whether or not the respondent chose the same response for every choice question or not, which is a good indicator that they were probably just clicking through the survey. I don‚Äôt want these respondents in my sample, so I screen them out here.\nHere is a screenshot of the specific run settings:\n\n\n\nTime stamps \nSince your entire survey is designed in , why not take advantage of that fact to collect more about your respondents? One thing I always do on my formr surveys is grab the time each respondent spends on every page. This is implemented by running Sys.time() at the top of every new page, which I then use to compute the difference between each time stamp to get the time spent on every page. This is useful in general just to be more informed about how your respondents are going through your survey, and particularly useful for examining behavior on the conjoint choice questions.\nPreview and check\nThe link to the survey will be https://your_run_name.formr.org. You can control whether your survey is ‚Äúlive‚Äù or not by modifying the ‚Äúvolume‚Äù icons. For collecting data, I recommend setting it to the  icon, which means people who have the link can access the survey.\nBut before you go live, it‚Äôs a good idea to do some quick testing. You can test each survey separately from their respective survey admin pages, and you can also test the entire run from the run admin page (check the left side menu). When testing, you may get an error - don‚Äôt panic! The error pages look a little different from the errors you‚Äôre used to in R, but if you click through the errors you can usually find the root cause of the error (the R error message will be buried somewhere on the page). Many times the errors are small typos, which is another reason why I like to initially build my surveys in .Rmd files - when I knit them to html pages, any typos or other small errors are much more easily identified.\nGetting the data\nOnce your survey is live and you start collecting responses, your response data will not be available in the ‚ÄúRun‚Äù. Instead, they will be available in each of the three survey pages. You can use the {formr} package to import the data directly in , or just go to the admin page for each survey and download the data as .csv files. The key piece to remember is that each respondent will be given a unique session variable that you can use to join all of the three separate data files together.\nWith that in mind, keep an eye out for a follow on post on how to join and clean the resulting data from this conjoint demo coming soon!\n\nYes, people have actually done conjoint surveys on fruit before.‚Ü©Ô∏é\n",
    "preview": "posts/2021-09-18-choice-based-conjoint-surveys-in-r-with-formr/images/example.png",
    "last_modified": "2021-10-05T22:21:53+00:00",
    "input_file": {},
    "preview_width": 640,
    "preview_height": 367
  },
  {
    "path": "posts/2021-07-03-in-search-of-keyboard-nirvana/",
    "title": "In search of keyboard nirvana",
    "description": "My journey to find a more ergonomic (and useful) keyboard",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-07-03",
    "categories": [
      "productivity",
      "keyboards",
      "R"
    ],
    "contents": "\n\nContents\nMechanical keyboards\nRemapping your keyboard\nTowards better ergonomics with split keyboards\nBuilding my own split keyboard\nTowards an ‚ÄúEnd Game‚Äù\nFirmware\nTrade offs in going split\nCost\nLearning curve\n\nAlternative layouts?\nTools to build your own keyboard\n\nWhen I entered grad school, I started spending far more time typing on a computer than I had before. After a few months in, I started searching for a better typing experience and ways to reduce the amount of keystrokes needed to get the job done. Now a decade later, I have most definitely taken the red pill and become far more aware of solutions and technologies I never would have imagined back then. This post is a brief summary of my journey in search of keyboard nirvana.\n\n\n\nFigure 1: Me back in 2011 reading about mechanical keyboards.\n\n\n\nMechanical keyboards\nOne of my first roommates in graduate school was a remarkably fast typist and used this loud, clacky mechanical keyboard (I had to wear earplugs or listen to music to get anything done when he was typing). Curiosity got the best of me, and after trying out his keyboard for a few minutes I immediately understood why people use mechanical keyboards. There is something about the combination of aural and tactile feedback you get when typing on a keyboard with mechanical switches that makes the typing experience just‚Ä¶better. But it wasn‚Äôt just aesthetically better - I was able to type at a faster speed and with fewer errors when using a mechanical keyboard.\nNeedless to say, I immediately started searching for a mechanical keyboard to replace my crummy old Apple keyboard. Somewhere along my searching, I came across articles about people who ‚Äúre-mapped‚Äù their keyboards so that some key presses would trigger other events. This seemed like a powerful idea for reducing key strokes, and after a bit more searching I discovered Karabiner Elements for mac. This software is invaluable. I made loads of customizations to simplify common operations. I became so dependent on it that I decided to design a custom key cap set for my first mechanical keyboard from WASD Keyboards to match my Karabiner Elements settings\n\n\n\nFigure 2: A rendering of my first custom mechanical keyboard, from WASD Keyboards.\n\n\n\nRemapping your keyboard\nThere are many software options for customizing and re-mapping your keyboard. I use Karabiner Elements for mac, but AutoHotkey is probably the most popular option for Windows users.\nThe use cases for these programs are endless, but I want to highlight one very powerful idea: adding keyboard layers. Every keyboard has at least two layers: the normal layer, and the ‚Äúshift‚Äù layer that converts lower-case letters to upper-case and numbers to symbols. Unfortunately, some of the most useful keys (e.g.¬†navigation arrows) are not conveniently located and require you to move your hand every time you want to use them. So one of the first things I implemented in re-mapping my keyboard was to try and move those navigation arrows back to ‚Äúhome row‚Äù:\n\n\n\nFigure 3: Where I wanted to relocate the navigation arrows.\n\n\n\nMy solution was to introduce a ‚ÄúCapslock‚Äù layer. This layer works just like the shift layer, except it gets triggered when holding down the otherwise rarely-used Capslock key. This layer uses J / I / K / L as arrow keys for navigating the cursor selecting text, and it re-maps the S / D / F keys into cut, copy, and paste as well as N and H into backspace and delete:\n\n\n\nFigure 4: My capslock layer.\n\n\n\nAs you can see in the demo below, this modification enables me to navigate the cursor and edit code / text without ever having to leave home row:\n\n\nYour browser does not support HTML video. \nI use Karabiner Elements for lots of other things too, like:\nLaunching applications like Google Chrome or Terminal with a single hotkey.\nOpening Google Chrome to a webpage (e.g.¬†gmail) with a single hotkey.\nTyping my email send off (\"Cheers,\\nJP\") with a single hotkey.\nYou can see all of my Karabiner Elements settings here.\nTowards better ergonomics with split keyboards\nTypical keyboard layouts are not that ergonomic, and after several years of using my WASD keyboard I eventually started developing wrist pain. My specific pain was from prolonged ulnar deviation, where the hands are bent outward at the wrist joint. So I started searching for a split keyboard to be able to hold my hands at a more natural position while typing (split keyboards actually fix a lot of ergonomic problems).\n\n\n\nFigure 5: Split keyboards fix a lot of ergonomic problems, like ulnar deviation.\n\n\n\nAfter doing a lot of research on different split boards, I decided to try out the Ergodox EZ, a highly-rated (albeit quite expensive) keyboard. I chose the Ergodox EZ as it had a 30-day return policy (though you have to pay the return shipping), and because the company that makes the Ergodox (ZSA) has some of the most highly-rated customer service of any company ever. I figured if I didn‚Äôt like it, I could probably return it without too much hassle.\n\n\n\nFigure 6: The Ergodox EZ.\n\n\n\nOne of the other features that attracted me to the Ergodox is their Oryx configurator software. This is an in-browser web application that enables you to fully customize every single key on the keyboard through a very user-friendly UI. All of a sudden, many of the key features that I loved about Karabiner Elements (such as re-mapping my Capslock key to use navigation arrows on the home row) could be programmed directly into the keyboard itself. This meant I could use the keyboard on any computer and have the same re-mapped keys at the ready.\n\n\n\nFigure 7: Screenshot of the Oryx software.\n\n\n\nThere are a lot of things to like about the Ergodox. First, the Oryx software was a game changer. Being able to directly control what each key does gave me all sorts of new ideas that made my typing incredibly efficient and far more comfortable than anything I had used in the past. But the single biggest improvement was probably the thumb key cluster. Your thumbs are quite strong, but on most keyboards they‚Äôre only useful for the space bar and maybe some contorted use of modifier keys. In contrast, the Ergodox has several keys right under each thumb, enabling far more efficient and comfortable access to using your thumb to type.\nMy single biggest improvement in using the thumb keys was to swap what used to be my capslock layer trigger to a thumb key. Now instead of holding down the capslock key with my much weaker left pinky finger to trigger a new layer, I could use my much stronger left thumb, freeing up my left pinky finger to actually type key strokes.\nAll together, the Ergodox EZ was a major improvement in my typing, both in terms of ergonomics and efficiency. My typing speed also increased from ~70 on an Apple keyboard to ~90 on the Ergodox. But after about six months of use, I still found some things weren‚Äôt quite right with the board. This review is a great summary of the pros and cons of the Ergodox, but my single biggest complaint was the precise location of the thumb key clusters. Most thumb keys were just too far away to be useful, and even the main thumb keys were a little too far out for my hands.\n\n\n\nFigure 8: Me after about 6 months of using the Ergodox EZ thumb cluster.\n\n\n\nBuilding my own split keyboard\nIf you‚Äôre at the point where you‚Äôre typing on an Ergodox EZ, it doesn‚Äôt take long before you start realizing there‚Äôs an entire world out there of DIY keyboard hobbists obsessed with ergonomics and custom built keyboards. A short perusal of r/ErgoMechKeyboards and you‚Äôll see a wide range of bizarre keyboards you never would have imagined existed, with names like Iris, Lily58, Kyria, and Corne.\n\n\n\nFigure 9: Me after first discovering r/ErgoMechKeyboards.\n\n\n\nAs an engineering faculty member at George Washington University, many of the tools needed to dive into building my own keyboard (e.g.¬†a soldering iron) were readily available to me via the makers space in the GW Innovation Center. So I convinced myself that making a keyboard would be a fun excuse to learn some new skills and meet more of the engineering students at GW (this was in 2018, only a few months after I had started at GW). I decided to make a Lily58, mostly because the parts were quite cheap and available at keyhive.xyz.\n\n\n\nFigure 10: Me and my first ever DIY keyboard (a Lily58), assembled (mostly) in the GW Innovation Center.\n\n\n\nThe project of building a Lily58 was a great learning experience, and I am more greatful for the people I met in the GWIC than in what I learned about building keyboards. Turns out building a keyboard covers quite a lot of engineering skills, including:\nSoldering microelectronics and circuitry.\nCAD design for making case components.\n3D printing and laser cutting those case components.\nProgramming the keyboard firmware.\nI got to work with some talented GW undergraduates on Friday afternoons working on each of these tasks. Someone even got this very promotional-esque shot of me working with a student soldering some microelectronics:\n\n\n\nFigure 11: A very staged-looking (but actually wasn‚Äôt staged) photo of me working with a student in the GWIC.\n\n\n\nI have to say that working with student in the GWIC has been a real highlight of my little keyboard journey. Given that most of what I do and teach as a professor involves the virtual space of data analysis and programming, it was great to get to do some ‚Äúhands on‚Äù engineering tasks with students outside of the classroom.\nTowards an ‚ÄúEnd Game‚Äù\nIn the world of DIY keyboards, many speak of a mythical ‚ÄúEnd Game‚Äù keyboard - one that is so perfected that you hang up your soldering iron, never to build another keyboard again. Of course, in reality each keyboard project is a step in another direction that almost inevitably leads to yet another keyboard project. It‚Äôs a similar logic to biking rule #12:\n\n\n\nFigure 12: ‚Ä¶where N is the current number of bikes owned.\n\n\n\nIn my case, I have now built no less than four keyboards, so I believe I can officially call building custom keyboards a hobby (problem?).\n\n\n\nFigure 13: Most peoples‚Äô reaction after I show them my keyboards.\n\n\n\nFor each new keyboard project, I either found something new I wanted to try out, or I found something I didn‚Äôt quite like about the last project (or both). For my Lily58, the biggest issue was simply the build quality wasn‚Äôt that high. I used sockets to hold the key switches in place so I could swap out different switches, but whenever I traveled with the board many of the switches would fall out, which got annoying pretty fast.\nSo I decided to build an Iris keyboard ‚Äì a close cousin to the Lily58 in terms of the key layout. I also decided to keep a detailed record of my build process as I learned so many tiny details in the process that I figured could help others looking to build their own keyboards (e.g.¬†installing a rotary encoder).\n\n\n\nFigure 14: My second keyboard - an Iris Rev 2.\n\n\n\n\nA rotary what now?\n\nOn most of my DIY boards, I have a rotary encoder on the right hand side, which is like a rotational switch. I use them for a variety of things. Perhaps the most obvious might be as a volume knob, but I also have my keyboards configured such that the rotary encoder triggers different behaviors depending on the active layer, including volume control, scrolling up and down, scrolling left and right, and zooming in and out.\n\n\n\nFigure 15: A rotary encoder I mounted on my Iris keyboard.\n\n\n\nMy Iris was a fantastic keyboard. Again, I worked a lot on it in the GWIC, using the 3D printers to print the case and soldering equipment to assemble much of the components. After some heavy use though, the rotary encoder broke off, and it was essentially irreparable, so I decided to build what seemed like a more robust keyboard ‚Äì the Kyria.\n\n\n\nFigure 16: My third keyboard - a Kyria Rev 1.\n\n\n\nDesigned by Thomas Baart, the Kyria keyboard has arguably the best assembly documentation of any keyboard kit I‚Äôve seen, and as such it is usually the board I recommend to first-time builders. Thomas put a lot of thought into the design of the board, and in general I would say this is probably the best quality board I have built (more photos here, and details about the board here). I also learned a bit more about using CAD with this keyboard as I modified the 3D printed case using Fusion 360 (thanks again to GW‚Äôs institutional license!). That said, the layout of this board just isn‚Äôt quite as comfortable for my hands as the Iris layout. In particular, the column stagger is much more aggressive, and it just doesn‚Äôt quite work for my hands.\nSo that leads me to my latest (and hopefully last?) build: a Wireless Corne (more photos here). The Corne keyboard has a near identical layout with the Iris, minus the number row. By this point, I had moved to using as many as five different keyboard layers, one of which being a numpad on my right hand, so I no longer used the number row anyway. Going wireless was also a very attractive option as I enjoy working in coffee shops and libraries on my laptop, so traveling with a compact and wireless keyboard would be much more convenient. As with my Iris, I kept a detailed build log.\n\n\n\nFigure 17: My (final?) keyboard - a Wireless Corne.\n\n\n\nFirmware\nI would be remiss if I didn‚Äôt at least mention the incredible open source software that runs all of these DIY keyboards. The main software most people use to power their keyboards is QMK Firmware. The software has become so developed that there‚Äôs even an open source keyboard configurator, similar to the Oryx software for the Ergodox. QMK is packed with loads of features, but perhaps most importantly is the highly flexible layer configurations, enabling you to map multiple layers so that your hands rarely ever need to leave the home row position.\nQMK‚Äôs wireless cousin is ZMK Firmware, which I am running on my wireless Corne. ZMK is newer and shares many of the same features as QMK, though not quite as many. It is also designed quite differently, and I would say it has a slightly steeper learning curve compared to QMK. If you‚Äôre newer to building your own keyboard, using QMK with the GUI configurator.\nTrade offs in going split\nThere are several drawbacks to adopting a split keyboard, but I want to discuss two common ones:\nCost\nLearning curve\nCost\nPerhaps one of the biggest drawbacks of split keyboards is that they generally cost more than traditional keyboards. Nonetheless, there are lots of good options for under or around $100 USD, such as:\nMicrosoft Scult ($60)\nKINESIS Freestyle ($99.00)\nLogitech ERGO K860 ($125.00)\nSome of the more premium split boards can cost quite a lot more, such as the Ergodox EZ at ~$350. And even building your own split keyboard isn‚Äôt all that cheap, with the final cost usually ranging from ~$100 to $250 depending on the parts used.\nBut despite the sometimes higher cost, I encourage you to re-frame your thinking about the value you get from your keyboards.\nFirst, if you use your keyboard on a daily basis for your job, you should consider your keyboard as a professional instrument. Professional musicians invest thousands of dollars into their instruments, and likewise professional chefs invest thousands of dollars into their knives. So if you type for a profession, why not spend only a few hundred dollars on a professional keyboard?\nSecond, consider your keyboard as a medical device. Billions of people depend on glasses to see well, and a typical pair of glasses can easily cost several hundred dollars. And just as using a correctly-prescribed pair of glasses is important for the health of your eyes, using a more ergonomic keyboard is important for the health of your fingers, hands, wrists, and shoulders (yes, all of those things are affected by how you type).\nSo yes, purchasing an ergonomic keyboard may cost you a little more up front, but it is generally an investment worth making, and especially if you are already finding yourself in pain from typing.\nLearning curve\nAdopting any new technology generally comes with a learning curve, and moving to a split keyboard is no different. But how hard it is to adapt to a new keyboard varies by a variety of factors.\nFirst, if you already are proficient at touch-typing (meaning you use all 10 fingers to type and you don‚Äôt need to look down at the key legends), adopting a split keyboard probably won‚Äôt be too challenging. For me, I found I was a little slower and made more errors for a few days when first using a split board, but after about a week I was back to otherwise ‚Äúnormal‚Äù typing speed. If you are not a proficient touch typist, I recommend getting up to a good typing speed (~60 WPM) before adopting a split keyboard. This is because split boards essentially force you to use the appropriate hand for each key, so if you are also learning how to type while using the split keyboard, you may find it extra challenging.\nSecond, the type of split keyboard can matter quite a lot. Some boards, such as the Microsoft Sculpt, have two split halves but are otherwise quite similar in the key positions compared to typical keyboards. Others, such as the Ergodox EZ, use an ‚Äúortholinear‚Äù layout, meaning that each row of keys align into columns with no stagger across rows. These columnar layouts are arguably more ergonomic and comfortable to type on, but they can take a little longer to get used to.\nMy recommendation is to try out a split board of some type and practice using it on a site like keybr.com. Get used to it first and give it at least a week of regular use before judging it. It can take a week or more for it to stop feeling strange, and your hands will thank you in the long run.\nAlternative layouts?\nThe one thing I tried along this journey that I generally do not recommend is learning a new keyboard layout, such as Colemak or Dvorak.\nIn case you didn‚Äôt know, the typical QWERTY layout is actually a pretty poor layout in terms of typing efficiency and ergonomics. There are lots of stories about why this layout was originally chosen. Some say it was intentionally designed to be inefficient so that early typewriter arms wouldn‚Äôt jam up if someone got to typing too fast. My favorite story is that early typewriter salesmen didn‚Äôt know how to type, but the QWERTY layout enabled them to type ‚Äútypewriter‚Äù by using only the upper row, making it easier to remember the sequence.\nWhatever the reason for designing the layout, QWERTY is pretty bad, but we‚Äôre all unfortunately pretty much stuck with it as the defacto standard. Being the keyboard enthusiast that I am, I have attempted several times to adopt Colemak, but I have never been able to get my speed anywhere near my speed with QWERTY. But I also do not see much benefit to using a different layout, especially relative to the steep learning curve in mastering it. I do not feel any discomfort using QWERTY, and my typing speed on a split keyboard is ~90 words per minute, which is plenty fast enough to be an efficient typist. So, this is just to say that if you came across this post looking for tips on ergonomic typing, I would much more heavily weigh using a split keyboard over the particular key layout on that keyboard. That said, if you‚Äôre not that proficient yet at any layout, you might save yourself some trouble and just start with an alternative to QWERTY.\nTools to build your own keyboard\nAt this point in my keyboard journey, I‚Äôm starting to wonder how different my life might be today if I had taken the blue pill. Certainly my hands and shoulders would be in much worse shape, but I might also just be happy using a simple old Apple keyboard. Ignorance can sometimes be bliss.\n\n\n\nFigure 18: Me in 2021 with about three too many keyboards in my office.\n\n\n\nNonetheless, should you choose to go down this path, hopefully I can save you a bit of time with some suggested tools. First, you‚Äôll need some pretty standard equipment. Here are my recommendations:\nA cheap soldering iron is all you really need to get the job done. No need to spend a fortune, especially if you won‚Äôt use it too often.\nA brass sponge to clean the soldering iron tip is a must. A good brass sponge will make up for anything lacking in a cheap iron.\nA cheap solder fan is a good idea, especially if you‚Äôre working in small spaces. Solder fumes are pretty toxic, and these little things actually work very well.\nReverse tweezers are a lifesaver for holding tiny parts.\nA Silicon mat is really nice so you don‚Äôt burn your desk and lose tiny parts.\nNot super necessary, but some sort of quad hand tool can be helpful for holding everything still when working.\nIn terms of suppliers, most keyboard parts shops are regional. In the U.S., both Keyhive and Littlekeyboards have a lot to offer.\nIf you want to learn more about and / or compare the many different split keyboards out there, check out this Shiny App I made (source code here). I made it both to help the community of split keyboard users find their next board, but also to learn and practice a lot about building Shiny Apps.\n\n\n\nFigure 19: Screenshot of my splitKbCompare app.\n\n\n\nFinally, if you do choose to adopt any of the solutions I wrote about in this post, please do reach out (Twitter, Reddit) - I‚Äôm happy to help however I can!\n\n\n\nFigure 20: Choose wisely.\n\n\n\n\n\n\n",
    "preview": "posts/2021-07-03-in-search-of-keyboard-nirvana/images/red_pill.gif",
    "last_modified": "2021-10-05T22:21:53+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-05-04-expand-your-productivity-with-espanso/",
    "title": "Expand your productivity with espanso",
    "description": "Custom text snippets with espanso: a text expander written in Rust",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-05-04",
    "categories": [
      "productivity",
      "R"
    ],
    "contents": "\n\nContents\nQuick overview\nPersonal information\nURLs\nCode\nPaste clipboard contents as plain text\nOpen things\nDates\nPackages\nHighlights from my default.yml file\n\n\n\nI recently discovered a wonderfully useful little program called espanso ‚Äì a ‚Äútext expander‚Äù that I now use on a daily basis. Text expander programs ‚Äúexpand‚Äù short text ‚Äútriggers‚Äù into longer / more complex strings of text, like this:\n\n\nThere are lots of these programs out there, such as Typinator, or the creatively-named ‚Äútextexpander‚Äù (macOS even has a build-in expander). But I prefer to use open source software whenever possible (the espanso source code is on GitHub), and especially when using software that tracks the text you type (imagine how easy it would be to grab passwords with this type of software). Plus espanso is free üòÑ. Of course if you‚Äôd like to support the project you can donate here.\nMore than anything, I started (and kept) using espanso because I found it to be remarkably simple to use and easy to customize. So far, it has integrated quite nicely into my day-to-day workflow. In fact, I have become such a fan of espanso that I decided to sit down and write a whole post highlighting some of the ways I use it.\nQuick overview\n\nNote: I‚Äôm skipping a lot of details about installation, etc. because it‚Äôs all there in the espanso documentation. It‚Äôs really simple to get it up and running ‚Äì check it out.\n\nTo set a text expansion, all you have to do is edit the default.yml file. You can find it‚Äôs location with this in the terminal:\n\nespanso path\n\n/Users/jhelvy/Library/Preferences/espanso\nOnce you‚Äôve opened up the default.yml file, you can define an expansion like this:\n\n\n  # Simple text replacement\n  - trigger: \":test\"\n    replace: \"Hello World!\"\n\n\n\nNow anytime I type :test, the text will expand to Hello World!. Pretty cool! üòé\nWhat I really love about this interface is it‚Äôs simplicity. With just a few lines you can define a wide range of custom expansions. After using it for just a few weeks, I have already come up with several dozen expansions that I now regularly use.\nI‚Äôll spend the rest of this post highlighting a few use cases, but for reference I also included a copy of most of my settings at the end of this post (I took out some snippets with personal information like the link to my personal Zoom room, etc.)\nPersonal information\nI can‚Äôt stand having to type my name, address, email, etc. into online forms. I probably have to do this once a week or so for one reason or another, so coming up with some quick expansions for common personal information is extremely satisfying.\n\nNote: It‚Äôs probably a really bad idea to put passwords you use in your espanso settings, so don‚Äôt do that!\n\nHere are a few I‚Äôve set up:\n\n\n\nTrigger\nExpansion\n\":jp\"\n\"John Paul Helveston\"\n\":jh\"\n\"John Helveston\"\n\":title\"\n\"Assistant Professor\"\n\":dept\"\n\"Engineering Management and Systems Engineering\"\n\":gw\"\n\"George Washington University\"\n\"@!\"\n\"jph@gwu.edu\"\n\nURLs\nI used to rely on bookmarks for lots of common sites I visit, but I often need to copy-paste the actual url to those sites (e.g.¬†if I‚Äôm sending the link to someone else). Before, I had to open up my browser, navigate to the site, then copy the url. Now I can just type a few keys üéâ! I start each of these with \"//\". For example, to get to my GitHub page, I just type //gh:\n\n\nBy far my most used url expansion this year was //zoom to expand to the url to my personal zoom room! üöÄ\nCode\nThis is where things start getting really helpful. I write lots of common code snippets for a wide variety of use cases, and the ability to automate these globally (i.e.¬†not just in a code IDE) on my computer is an incredible help. The time savings don‚Äôt come from avoiding the extra keystrokes ‚Äì they come from avoiding typos! It‚Äôs all too easy to miss a tiny symbol or letter in a chunk of code which then results in several minutes (if not longer) of searching for the bug.\nAs a convention, I decided to start all of my ‚Äúcode‚Äù triggers with a double letter of the first letter of the code language. So html expansions all start with hh, R expansions start with rr, python with pp, etc. I use this rather than starting with the default : symbol because 1) I find it easier to remember, and 2) it doesn‚Äôt require me to use the Shift key (so it‚Äôs fast).\nHTML\nI don‚Äôt write a lot of html, but occasionally I‚Äôll use it to insert an image in a RMarkdown document. And usually I want that image centered. The basic template I usually start with is:\n\n<center>\n<img src=\"\" width=100%>\n<\/center>\n\nI use the trigger hhimg (which I remember as ‚Äúhtml‚Äù + ‚Äúimg‚Äù) to insert this snippet. Here‚Äôs the code to define this expansion:\n\n\n  - trigger: \"hhimg\"\n    replace: \"<center>\\n<img src=\\\"$|$\\\" width=100%>\\n<\/center>\"\n\n\n\nNotice the $|$ symbols inside the quotes following ‚Äúsrc‚Äù. This sets the location of the cursor once the expansion is complete, allowing me to quickly type in the name of the path to the image I want to insert. Another one of those little bonus features about espanso that is just ü§å *chef‚Äôs kiss*.\nR\nSince I use R more than any other language, I‚Äôve come up with a lot of R-specific shortcuts. But before I dive into them, a quick side note:\nOne important modification I learned (thanks to some help on the espanso Reddit community) is that if you‚Äôre working in RStudio, the expansions don‚Äôt quite work correctly on their own (I believe it might have something to do with RStudio‚Äôs autofill feature). To fix it, I had to insert the force_clipboard: true setting into each espanso expansion. For example, in my snippet to read in a CSV file, I inserted this option between the trigger and expansion text like this:\n\n\n  - trigger: \"rrcsv\"\n    force_clipboard: true\n    replace: \"read_csv($|$)\"\n\n\n\nOkay with that in mind, I‚Äôll highlight a few R expansions I use a lot. I‚Äôve organized this based on my common workflow for exploring data:\nAdd a setup chunk (if working in Rmd)\nLoad libraries & data\nWrangle data\nVisualize\nAdd a setup chunk\nI usually include a ‚Äúsetup‚Äù chunk in most of my Rmd files, but it‚Äôs really hard to remember all the specific details for various settings, so I made a dedicated expansion just for this. With this expansion, I can insert my whole default setup chunk with rrsetup:\n  - trigger: \"rrsetup\"\n    force_clipboard: true\n    replace: |\n              ```{r setup, include=FALSE}\n              knitr::opts_chunk$set(\n                warning = FALSE,\n                message = FALSE,\n                fig.path = \"figs/\",\n                fig.width = 7.252,\n                fig.height = 4,\n                comment = \"#>\",\n                fig.retina = 3\n              )\n              ```\nLoad libraries & data\n\n\nI use some simple shortcuts to load individual libraries, like rrtidy to expand to library(tidyverse). But (as shown in the above image) I also set up an expansion to load some of my most often used libraries and settings. By typing rrstart, I get this expansion:\n\n\nlibrary(tidyverse)\nlibrary(cowplot)\noptions(dplyr.width = Inf)\n\n\n\nWith my libraries loaded, I then read in my data. I use rrcsv to expand to read_csv($|$), rrex to expand to read_excel($|$), and rrhere to expand to here::here($|$), which I use to define paths to files.\n\nSide note: if you don‚Äôt already, you should definitely try using the {here} package to define paths.\n\nWrangle data\n\n\nI usually wrangle my data using tidyverse commands, and I have come up with a few expansions for some common ‚Äúpipelines‚Äù. For example, one common sequence is to do grouped summary operations. I use the rrgs (‚Äúgs‚Äù for ‚Äúgrouped summary‚Äù) trigger to load the code block:\n\n\n    group_by() %>%\n    summarise()\n\n\n\nLikewise, I use the rrgm trigger to load the code block for a grouped mutate:\n\n\n    group_by() %>%\n    mutate()\n\n\n\nThere are so many of these you could put together!\nVisualize\n\n\nSince {ggplot2} has such a distinct syntax, I decided to start my ggplot code snippets with gg rather than rr. Some of my favoriate {ggplot2} expansions are the scaling shortcuts:\nggsxc ‚Äì> scale_x_continuous()\nggsyc ‚Äì> scale_y_continuous()\nggsxd ‚Äì> scale_x_discrete()\nggsyd ‚Äì> scale_y_discrete()\nI also use some snippets for common geoms, like ggpoint:\n\n\nggplot() +\n    geom_point(aes(x = , y = ))\n\n\n\nand ggcol:\n\n\nggplot() +\n    geom_col(aes(x = , y = , fill = ))\n\n\n\nPaste clipboard contents as plain text\n\n\nThis is probably my favorite little hack. Often times, I want to copy-paste a snippet of text from one source to another, but when I go to paste it somewhere else, it retains all of the text formatting from the original source. My previous work around was to paste it first into a text editor (e.g.¬†Sublime Text), then re-copy-paste it from there with the formatting now stripped away. But since espanso has support for working with your ‚Äúclipboard‚Äù, I found I could simply paste the plain text by using the force_clipboard: true. I use ppp as the trigger for this:\n\n\n  - trigger: \"ppp\"\n    force_clipboard: true\n    replace: \"{{clipboard}}\"\n    vars:\n      - name: \"clipboard\"\n        type: \"clipboard\"\n\n\n\nOpen things\nYou can run terminal commands using an espanso trigger. I haven‚Äôt found too many ways to use this feature, but it is helpful for opening files or folders that may be buried deep down in some folder structure. For example, I use the :espanso trigger to open the default.yml file to edit my espanso settings:\n\n\n  - trigger: \":espanso\"\n    replace: \"{{output}}\"\n    vars:\n      - name: output\n        type: shell\n        params:\n          cmd: \"open '/Users/jhelvy/gh/espanso/espanso/default.yml'\"\n\n\n\nDates\nThese come from the espanso documentation, but they‚Äôre super useful:\n\n\n  - trigger: \":date\"\n    force_clipboard: true\n    replace: \"{{today}}\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y-%m-%d\"\n\n  - trigger: \":time\"\n    force_clipboard: true\n    replace: \"{{time}}\"\n    vars:\n      - name: time\n        type: date\n        params:\n          format: \"%H:%M\"\n\n\n\nPackages\nThere are already a lot of great espanso packages. My favorite so far is the emoji package. It‚Äôs super convenient, but I often forget the name of specific emojis, so I made another expansion to the url to an emoji cheat sheet site:\n\n\n  - trigger: \"//emo\"\n    force_clipboard: true\n    replace: \"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n\n\n\nHighlights from my default.yml file\nThanks for reading, and I hope you check out espanso! Here are some of the expansions I have come up with in my default.yml file (for now‚Ä¶again, I removed a few that had some personal information)\n# espanso configuration file\n\n# This is the default configuration file, change it as you like it\n# You can refer to the official documentation:\n# https://espanso.org/docs/\n\n# Matches are the substitution rules, when you type the \"trigger\" string\n# it gets replaced by the \"replace\" string.\n\nmatches:\n\n  # Sign offs\n\n  - trigger: \"cjo\"\n    force_clipboard: true\n    replace: \"Cheers,\\nJohn\"\n\n  - trigger: \"bjo\"\n    force_clipboard: true\n    replace: \"Best,\\nJohn\"\n\n  - trigger: \"rjo\"\n    force_clipboard: true\n    replace: \"Regards,\\nJohn\"\n\n  - trigger: \"cjp\"\n    force_clipboard: true\n    replace: \"Cheers,\\nJP\"\n\n  - trigger: \"cpr\"\n    force_clipboard: true\n    replace: \"Cheers,\\nProfessor Helveston\"\n\n  # URLs\n\n  - trigger: \"//emo\"\n    force_clipboard: true\n    replace: \"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n\n  - trigger: \"//dr\"\n    force_clipboard: true\n    replace: \"https://drive.google.com/drive/u/0/my-drive\"\n\n  - trigger: \"//gh\"\n    force_clipboard: true\n    replace: \"https://github.com/jhelvy/\"\n\n  - trigger: \"//jh\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/\"\n\n  - trigger: \"//talks\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/talks\"\n\n  - trigger: \"//pubs\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/publications\"\n\n  - trigger: \"//gm\"\n    force_clipboard: true\n    replace: \"https://mail.google.com/mail/u/0/\"\n\n  # GW\n\n  - trigger: \":title\"\n    force_clipboard: true\n    replace: \"Assistant Professor\"\n\n  - trigger: \":gw\"\n    force_clipboard: true\n    replace: \"George Washington University\"\n\n  - trigger: \":dept\"\n    force_clipboard: true\n    replace: \"Engineering Management and Systems Engineering\"\n\n  # Names\n\n  - trigger: \":jp\"\n    force_clipboard: true\n    replace: \"John Paul Helveston\"\n\n  - trigger: \":jh\"\n    force_clipboard: true\n    replace: \"John Helveston\"\n\n  # HTML\n\n  - trigger: \"hhimg\"\n    force_clipboard: true\n    replace: \"<center>\\n<img src=\\\"$|$\\\" width=100%>\\n<\/center>\"\n\n  - trigger: \"hhcss\"\n    force_clipboard: true\n    replace: \"<style>\\n$|$\\n<\/style>\"\n\n  - trigger: \"hhbr\"\n    force_clipboard: true\n    replace: \"<br>\"\n\n  # R\n\n  - trigger: \"rrrm\"\n    force_clipboard: true\n    replace: \"rm(list = ls())\"\n\n  - trigger: \"rrrs\"\n    force_clipboard: true\n    replace: \"rs.restartR()\"\n\n  - trigger: \"rrlib\"\n    force_clipboard: true\n    replace: \"library($|$)\"\n\n  - trigger: \"rrtidy\"\n    force_clipboard: true\n    replace: \"library(tidyverse)\\n\"\n\n  - trigger: \"rrdply\"\n    force_clipboard: true\n    replace: \"library(dplyr)\\n\"\n\n  - trigger: \"rrcow\"\n    force_clipboard: true\n    replace: \"library(cowplot)\\n\"\n\n  - trigger: \"rrops\"\n    force_clipboard: true\n    replace: \"options(dplyr.width = Inf)\\n\"\n\n  - trigger: \"rrstart\"\n    force_clipboard: true\n    replace: \"library(tidyverse)\\nlibrary(cowplot)\\noptions(dplyr.width = Inf)\\n\"\n\n  - trigger: \"rrsetup\"\n    force_clipboard: true\n    replace: |\n              ```{r setup, include=FALSE}\n              knitr::opts_chunk$set(\n                warning = FALSE,\n                message = FALSE,\n                fig.path = \"figs/\",\n                fig.width = 7.252,\n                fig.height = 4,\n                comment = \"#>\",\n                fig.retina = 3\n              )\n              ```\n\n  - trigger: \"rrcsv\"\n    force_clipboard: true\n    replace: \"read_csv($|$)\"\n\n  - trigger: \"rrex\"\n    force_clipboard: true\n    replace: \"read_excel($|$)\"\n\n  - trigger: \"rrhere\"\n    force_clipboard: true\n    replace: \"here::here($|$)\"\n\n  - trigger: \"rread\"\n    force_clipboard: true\n    replace: \"read_csv(here::here($|$))\"\n\n  - trigger: \"rrgs\"\n    force_clipboard: true\n    replace: \"group_by($|$) %>%\\n    summarise()\\n\"\n\n  - trigger: \"rrgm\"\n    force_clipboard: true\n    replace: \"group_by($|$) %>%\\n    mutate()\\n\"\n\n  - trigger: \"filterne\"\n    force_clipboard: true\n    replace: \"filter($|$ != )\"\n\n  - trigger: \"rrin\"\n    force_clipboard: true\n    replace: \" %in% \"\n\n  - trigger: \"ggsxc\"\n    force_clipboard: true\n    replace: \"scale_x_continuous($|$) +\"\n\n  - trigger: \"ggsyc\"\n    force_clipboard: true\n    replace: \"scale_y_continuous($|$) +\"\n\n  - trigger: \"ggsxd\"\n    force_clipboard: true\n    replace: \"scale_x_discrete($|$) +\"\n\n  - trigger: \"ggsyc\"\n    force_clipboard: true\n    replace: \"scale_y_discrete($|$) +\"\n\n  - trigger: \"ggex\"\n    force_clipboard: true\n    replace: \"expand = expansion(mult = c(0, 0.05))\"\n\n  - trigger: \"rrch\"\n    force_clipboard: true\n    replace: \"```{r$|$}\\n```\"\n\n  - trigger: \"rrmd\"\n    force_clipboard: true\n    replace: \"rmarkdown::render($|$)\"\n\n  - trigger: \"rrxi\"\n    force_clipboard: true\n    replace: \"xaringan::inf_mr()\"\n\n  - trigger: \"rrgg\"\n    force_clipboard: true\n    replace: \"ggplot($|$) +\\n\"\n\n  - trigger: \"ggcol\"\n    force_clipboard: true\n    replace: \"ggplot() +\\n    geom_col(aes(x = $|$, y = , fill = ))\\n\"\n\n  - trigger: \"ggpoint\"\n    force_clipboard: true\n    replace: \"ggplot() +\\n    geom_point(aes(x = $|$, y = ))\\n\"\n\n  # Dates\n\n  - trigger: \":date\"\n    force_clipboard: true\n    replace: \"{{today}}\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y-%m-%d\"\n\n  - trigger: \":time\"\n    force_clipboard: true\n    replace: \"{{time}}\"\n    vars:\n      - name: time\n        type: date\n        params:\n          format: \"%H:%M\"\n\n  # Paste clipboard contents as plain text\n\n  - trigger: \"ppp\"\n    force_clipboard: true\n    replace: \"{{clipboard}}\"\n    vars:\n      - name: \"clipboard\"\n        type: \"clipboard\"\n\n  # Open things\n\n  - trigger: \":espanso\"\n    replace: \"{{output}}\"\n    vars:\n      - name: output\n        type: shell\n        params:\n          cmd: \"open '/Users/jhelvy/gh/espanso/espanso/default.yml'\"\n\n\n\n",
    "preview": "posts/2021-05-04-expand-your-productivity-with-espanso/images/date.gif",
    "last_modified": "2021-10-05T22:21:53+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-25-customizing-distill-with-htmltools-and-css/",
    "title": "Customizing distill with {htmltools} and CSS",
    "description": "How I added lots of little features to my distill site with the {htmltools} package, CSS, and a handful of little R functions.",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "tutorial",
      "distill",
      "R"
    ],
    "contents": "\n\nContents\nFinding the html\n{htmltools} to the rescue!\nGetting organized\nHaiku research summaries\nLink ‚Äúbuttons‚Äù with icons + text\nSide note on academic icons\n\nFloat an image left / right with wrapped text\nFloat a single image\nFloat multiple images\n\n‚ÄúLast updated on‚Ä¶‚Äù statement in footer\nFinal thoughts\n\n\n\nOne of the things I love about {distill} as a site builder is that it is super light weight. It comes out of the box with very few bells and whistles, enabling you to create a site from scratch in minutes. I tried using {blogdown} with the Hugo Academic theme, but in the end I found the overall configuration a bit overwhelming, even with the guidance of Alison Hill‚Äôs incredible post on how to do it (btw, if you want to make a blogdown site, you totally should read her posts on blogdown). Distill was just simpler, so I dove in.\nThat said, once I did get my distill site running, I found myself longing for some of the really cool features I‚Äôve seen on peoples‚Äô blogdown sites, like Alison Hill‚Äôs site (if you can‚Äôt tell, Alison‚Äôs work has been a major source of inspiration for me). But then I realized, ‚Äúwait a minute‚Ä¶I‚Äôm working in R, and whenever I want some functionality that doesn‚Äôt yet exist, I can just write my own functions!‚Äù\nSo that‚Äôs what I set out to do - write a bunch of functions and hack away at CSS to construct the features I wanted. This post walks through my general strategy and then shows how I implemented some of the features on my site.\n\nFull disclosure: I am sure there are probably other (likely better) ways to do some of these things, but this is what I came up with and it worked for me!\n\nFinding the html\nFor every feature I wanted to add, my starting point was trying to find an example somewhere of the raw html for that feature. My knowledge of html is very limited and hacky, but I do know that if I see something I want, I can use the ‚Äúinspect‚Äù tool in Chrome to grab the html by right-clicking on it and selecting ‚ÄúCopy element‚Äù, like this:\n\n\nWith some html in hand, I had a template to work with. My starting point was always to just drop the html directly into a page and edit it until it looked the way I wanted. But most of the time I needed to replicate and reuse that html in multiple places, so I had to find a way to write R code to generate html.\n{htmltools} to the rescue!\nLuckily, some clever folks wrote a package that generates html code! Since html controls formatting by wrapping content inside tags, the {htmltools} package uses a bunch of handy functions to generate those tags for you. For example, if I wanted to make a level 1 header tag, I could use the h1() function:\n\n\nlibrary(htmltools)\n\ncontent <- h1(\"Hello World\")\nprint(content)\n\n\n#> <h1>Hello World<\/h1>\n\nFor most situations, this works great, but there are also times where I need a tag that isn‚Äôt yet supported. In those case, you can insert the tags yourself as a string and use the tag() function to create custom tags. For example, the <aside> tag is used in distill to put content in the sidebar, but {htmltools} does not have an aside() function. Instead, I can create those tages like this:\n\n\ncontent <- tag(\"aside\", \"Hello World\")\nprint(content)\n\n\n#> <aside>Hello World<\/aside>\n\nWith this in mind, we now have just about everything we need to start writing functions to construct some html! I‚Äôll start with a simple example of writing a function to insert some text in the sidebar.\nGetting organized\nBefore I started writing functions, I needed to find a convenient place to put them so I could use them later in my distill articles and posts. Following the typical folder structure for R packages, I decided to make a folder called ‚ÄúR‚Äù in the root directory of my distill site and put a file called functions.R in it. Now I can access any functions I write inside this file by calling the following at the top of any .Rmd file:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n\n\nIt‚Äôs kind of like calling library(package) at the top of a file, except your functions don‚Äôt live in a package. Eventually, I may choose to move some of my functions to an external package so others can use them, but for now they‚Äôll live happily in my functions.R file üòÑ.\nHaiku research summaries\nInspired by Andrew Heiss‚Äôs research page, I wanted to insert a haiku summary next to each citation of each paper on my publications page. All you need to do is wrap some text in <aside> tags and it will show up in the side bar. But rather than write the html for each haiku (e.g.¬†<aside>haiku text<\/aside>), I decided to write a simple function to generate the html tags for me.\nI started with three functions to generate the tags for some center-aligned text in the sidebar:\n\n\n# Generates <aside>text<\/aside>\naside <- function(text) {\n  return(htmltools::tag(\"aside\", list(text)))\n}\n\n# Generates <center>text<\/center>\ncenter <- function(text) {\n  return(htmltools::tag(\"center\", list(text)))\n}\n\n# Generates <aside><center>text<\/center><\/aside>\naside_center <- function(text) {\n  return(aside(center(list(text))))\n}\n\n\n\nNow I can insert some center-aligned text in the sidebar with the function aside_center(text). But since haikus have a particular 5-7-5 syllabic structure, I thought it would be better to put each line on a separate row. I also wanted the haikus to be in italic font. So I wrote a haiku() function that takes three text inputs and generates the html to put them in the side bar on separate lines:\n\n\nhaiku <- function(one, two, three) {\n  return(aside_center(list(\n    htmltools::em(\n      one, htmltools::br(),\n      two, htmltools::br(),\n      three)\n  )))\n}\n\n\n\nWith this little function, I can insert haikus throughout my publications page without having to write any html! For example, the html for the haiku for our recent paper in Environmental Research Letters is generated like this:\n\n\nhtml <- haiku(\n  \"A five minute ride\",\n  \"In an EV can increase\",\n  \"The chance you'll buy one\"\n)\n\nprint(html)\n\n\n#> <aside>\n#>   <center>\n#>     <em>\n#>       A five minute ride\n#>       <br/>\n#>       In an EV can increase\n#>       <br/>\n#>       The chance you'll buy one\n#>     <\/em>\n#>   <\/center>\n#> <\/aside>\n\n\nImportant caveat: For this to work, I had to insert each haiku using in-line R code, like this: `r haiku(\"one\", \"two\", \"three\")`. If I used a code chunk, the output will get wrapped in a <div>, nullifying the <aside> tags.\n\nHopefully this example gives you the gist of the general strategy of writing a function to produce the desired html. For the most part, the strategy is the same for all the other features on this post, with the exception that some require a little CSS sprinkled on top.\nLink ‚Äúbuttons‚Äù with icons + text\nEveryone knows that cool points are directly proportional to usage of fontawesome icons on your website. So when it came time to add links to content on my publications page, I had to find a way to make it easier to insert icons with the links. Since {htmltools} does not have a default tag for <i><\/i>, I made a function to build the tags using htmltools::tag():\n\n\n# Generates <i class=\"icon\"><\/i>\nmake_icon <- function(icon) {\n  return(htmltools::tag(\"i\", list(class = icon)))\n}\n\n\n\nI can now get an icon for any fontawesome by using it‚Äôs class. For example, I can get the GitHub icon like this:\n\n\nmake_icon(\"fab fa-github\")\n\n\n\nBecause this function just generates generic <i><\/i> tags, it works with other icon libraries too. For example, I can insert the Google Scholar icon from academic icons using make_icon(\"ai ai-google-scholar\"). Cool!\nOf course I want links that have icons + text, so I made another function to paste on the text:\n\n\nmake_icon_text <- function(icon, text) {\n  return(htmltools::HTML(paste0(make_icon(icon), \" \", text)))\n}\n\n\n\nAnd finally, to make a link, I need to make one more function using the htmltools::a() function. I also added a class I called \"icon-link\" so I could add some CSS styling later to these links:\n\n\nicon_link <- function(icon = NULL, text = NULL, url = NULL) {\n  if (!is.null(icon)) {\n    text <- make_icon_text(icon, text)\n  }\n  return(htmltools::a(href = url, text, class = \"icon-link\"))\n}\n\n\n\nBy itself, this function will produce a link with an icon and text. To make it looks more like a button (which is what I wanted), I added the following CSS in my jhelvy.css theme, which is the theme I set to all pages in my _site.yml file:\n\n.icon-link {\n    background-color: var(--color-primary);\n    color: var(--color-white);\n    padding: 3px 5px 3px 5px;\n    margin: 0 2px 0 2px;\n    border-radius: 5px; /* Rounded edges */\n}\n\n.icon-link:hover {\n    background-color: var(--color-secondary);\n    color: var(--color-white);\n}\n\n.icon-link {\n    background-color: var(--color-primary);\n    color: var(--color-white);\n    padding: 3px 5px 3px 5px;\n    margin: 0 2px 0 2px;\n    border-radius: 5px; /* Rounded edges */\n}\n\n.icon-link:hover {\n    background-color: var(--color-secondary);\n    color: var(--color-white);\n}\n\n\nNote: I use parameters throughout my css file so I can use common values, like colors, so that‚Äôs what var(--color-primary); and var(--color-secondary); are about. You can see what color values these refer to at the top of my jhelvy.css file.\n\nYou can see how these ‚Äúbuttons‚Äù look on my publications page. For example, the three buttons at the top are generated with this chunk in my publications.Rmd file:\n\n\nicon_link(\n    icon = \"ai ai-google-scholar\",\n    text = \"Google Scholar\",\n    url  = \"https://scholar.google.com/citations?user=DY2D56IAAAAJ\"\n)\nicon_link(\n    icon = \"ai ai-orcid\",\n    text = \"ORCID\",\n    url  = \"https://orcid.org/0000-0002-2657-9191\"\n)\nicon_link(\n    icon = \"ai ai-researchgate\",\n    text = \"Research Gate\",\n    url  = \"https://www.researchgate.net/profile/John_Helveston\"\n)\n\n\n\n\n\n Google Scholar ORCID Research Gate\n\n\nSide note on academic icons\nThe distill package supports fontawesome icons out of the box, but if you want to include academic icons you‚Äôll need to include a link to the style sheet in the page header. You can quickly add it to all pages by making a header.html file in your root directory that contains this line:\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/jpswalsh/academicons@1/css/academicons.min.css\">\n\nThen in your _site.yml you can add it to every page by changing the output parameter:\noutput:\n  distill::distill_article:\n    includes:\n      in_header:\n      - header.html\nFloat an image left / right with wrapped text\nA very common layout I see on lots of sites is an image floated to the left or right with text wrapping around it. Here‚Äôs an example from my lab page:\n\n\nThere are probably lots of ways to do this, but a simple enough solution is to use the ::: notation to create custom divs. This isn‚Äôt needed if your output is a html_document, but for distill articles you need to create a new div that includes the image and text wrapping around it (see this issue for details as to why you have to do this).\nFloat a single image\nIf you have just a single image that you want to wrap text around, you can do it like this:\n:::float-image\n\n```{r out.width='150px', out.extra='style=\"float:left; padding:10px\"', echo=FALSE}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can name the div whatever you want - I just used float-image to be descriptive. I included all the CSS needed to float the image in the code chunk settings: out.width='150px', out.extra='style=\"float:left; padding:10px\"'. You may want to adjust the padding to fit your site‚Äôs look and feel, but this should be all you need to get the job done.\nFloat multiple images\nSince I use this layout frequently, I decided to define two classes, float-left and float-right, in my jhelvy.css theme that style any images in a div with those classes to float left or right, with a little padding:\n\n.float-left img {\n    float:left;\n    padding: 5px 10px 5px 0px;\n}\n\n.float-right img {\n    float:right;\n    padding: 5px 0px 5px 10px;\n}\n\n.float-left img {\n    float:left;\n    padding: 5px 10px 5px 0px;\n}\n\n.float-right img {\n    float:right;\n    padding: 5px 0px 5px 10px;\n}\n\nNow to float an image and wrap text around it, all I need to do is use one of those classes for the div name, and any images between the ::: marks will be floated left or right:\n:::float-left\n\n```{r, out.width='150px'}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can use whatever method you want to insert images, like knitr::include_graphics() or just insert direct html (which is what I actually end up doing most often).\n\nCaveat: Anything in the div created by ::: will be masked to the table of contents, so I don‚Äôt recomment wrapping a whole article inside ::: to float multiple images (though you could) and instead recommend wrapping just the elements you want to float.\n\n‚ÄúLast updated on‚Ä¶‚Äù statement in footer\nI wanted to put a date somewhere on my site so people can see when it was last updated, and I figured the footer was a good location since it‚Äôs out of the way but still on every page (even blog posts). The thing is, {distill} generates the footer from a single, static _footer.html file in the root directory. So if I want the date to update in the footer, I have to update the _footer.html file on every build.\nNot a problem - just make a create_footer() function and call it before you build the site! My create_footer() function lives in my functions.R file, and it‚Äôs a bit long as it also inserts some icons and other text. But the main part doing the date updating is the function last_updated():\n\n\nlast_updated <- function() {\n  return(htmltools::span(\n    paste0(\n      'Last updated on ',\n      format(Sys.Date(), format=\"%B %d, %Y\")\n    ),\n    style = \"font-size:0.8rem;\")\n  )\n}\n\n\n\nThis just generates a span of the text ‚ÄúLast updated on {date}‚Äù with a smaller font size. I call this function inside my create_footer() function to grab the latest date, then the function write the _footer.html file to the root directory.\nTo simplify the site build, I put a build_site.R file in root directory with code to load all the functions in functions.R, create the footer, then build the site:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n# Fist build the footer to capture today's date\ncreate_footer()\n\n# Then render the site\nrmarkdown::render_site(encoding = 'UTF-8')\n\n\n\nNow I just source build_site.R and my site builds with an updated footer to today‚Äôs date! What‚Äôs even more fun is I use a GitHub Action to automatically run build_site.R every time I commit something to the repo where my site lives and commit all the site files to my gh-pages branch. So I never have to worry about creating the footer - it‚Äôs all done automatically!\nFinal thoughts\nComing up with little solutions to each of these features was a highly iterative process, and for the most part I really wasn‚Äôt sure how to do any of this when I first got started. Each feature I added usually started by being inspired from someone else‚Äôs work, like the haiku research summaries and buttons with icons and text on Andrew Heiss‚Äôs research page. I found the process of coming up with a solution to implement each feature to be a fun way to learn new R tricks, especially in working with CSS. If you‚Äôre an R / distill / blogdown user looking to customize your site, hopefully these little examples will inspire you too!\n\n\n\n",
    "preview": "posts/2021-03-25-customizing-distill-with-htmltools-and-css/images/css_html.png",
    "last_modified": "2021-10-05T22:21:53+00:00",
    "input_file": {},
    "preview_width": 4780,
    "preview_height": 1575
  }
]
