[
  {
    "path": "posts/2021-05-04-expand-your-productivity-with-espanso/",
    "title": "Expand your productivity with espanso",
    "description": "Custom text snippets with espanso: a text expander written in Rust",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-05-04",
    "categories": [
      "productivity",
      "R"
    ],
    "contents": "\n\nContents\nQuick overview\nPersonal information\nURLs\nCode\nPaste clipboard contents as plain text\nOpen things\nDates\nPackages\nHighlights from my default.yml file\n\n\n\nI recently discovered a wonderfully useful little program called espanso – a “text expander” that I now use on a daily basis. Text expander programs “expand” short text “triggers” into longer / more complex strings of text, like this:\n\n\nThere are lots of these programs out there, such as Typinator, or the creatively-named “textexpander” (macOS even has a build-in expander). But I prefer to use open source software whenever possible (the espanso source code is on GitHub), and especially when using software that tracks the text you type (imagine how easy it would be to grab passwords with this type of software). Plus espanso is free 😄. Of course if you’d like to support the project you can donate here.\nMore than anything, I started (and kept) using espanso because I found it to be remarkably simple to use and easy to customize. So far, it has integrated quite nicely into my day-to-day workflow. In fact, I have become such a fan of espanso that I decided to sit down and write a whole post highlighting some of the ways I use it.\nQuick overview\n\nNote: I’m skipping a lot of details about installation, etc. because it’s all there in the espanso documentation. It’s really simple to get it up and running – check it out.\n\nTo set a text expansion, all you have to do is edit the default.yml file. You can find it’s location with this in the terminal:\n\nespanso path\n\n/Users/jhelvy/Library/Preferences/espanso\nOnce you’ve opened up the default.yml file, you can define an expansion like this:\n\n\n  # Simple text replacement\n  - trigger: \":test\"\n    replace: \"Hello World!\"\n\n\n\nNow anytime I type :test, the text will expand to Hello World!. Pretty cool! 😎\nWhat I really love about this interface is it’s simplicity. With just a few lines you can define a wide range of custom expansions. After using it for just a few weeks, I have already come up with several dozen expansions that I now regularly use.\nI’ll spend the rest of this post highlighting a few use cases, but for reference I also included a copy of most of my settings at the end of this post (I took out some snippets with personal information like the link to my personal Zoom room, etc.)\nPersonal information\nI can’t stand having to type my name, address, email, etc. into online forms. I probably have to do this once a week or so for one reason or another, so coming up with some quick expansions for common personal information is extremely satisfying.\n\nNote: It’s probably a really bad idea to put passwords you use in your espanso settings, so don’t do that!\n\nHere are a few I’ve set up:\n\n\n\nTrigger\nExpansion\n\":jp\"\n\"John Paul Helveston\"\n\":jh\"\n\"John Helveston\"\n\":title\"\n\"Assistant Professor\"\n\":dept\"\n\"Engineering Management and Systems Engineering\"\n\":gw\"\n\"George Washington University\"\n\"@!\"\n\"jph@gwu.edu\"\n\nURLs\nI used to rely on bookmarks for lots of common sites I visit, but I often need to copy-paste the actual url to those sites (e.g. if I’m sending the link to someone else). Before, I had to open up my browser, navigate to the site, then copy the url. Now I can just type a few keys 🎉! I start each of these with \"//\". For example, to get to my GitHub page, I just type //gh:\n\n\nBy far my most used url expansion this year was //zoom to expand to the url to my personal zoom room! 🚀\nCode\nThis is where things start getting really helpful. I write lots of common code snippets for a wide variety of use cases, and the ability to automate these globally (i.e. not just in a code IDE) on my computer is an incredible help. The time savings don’t come from avoiding the extra keystrokes – they come from avoiding typos! It’s all too easy to miss a tiny symbol or letter in a chunk of code which then results in several minutes (if not longer) of searching for the bug.\nAs a convention, I decided to start all of my “code” triggers with a double letter of the first letter of the code language. So html expansions all start with hh, R expansions start with rr, python with pp, etc. I use this rather than starting with the default : symbol because 1) I find it easier to remember, and 2) it doesn’t require me to use the Shift key (so it’s fast).\nHTML\nI don’t write a lot of html, but occasionally I’ll use it to insert an image in a RMarkdown document. And usually I want that image centered. The basic template I usually start with is:\n\n<center>\n<img src=\"\" width=100%>\n<\/center>\n\nI use the trigger hhimg (which I remember as “html” + “img”) to insert this snippet. Here’s the code to define this expansion:\n\n\n  - trigger: \"hhimg\"\n    replace: \"<center>\\n<img src=\\\"$|$\\\" width=100%>\\n<\/center>\"\n\n\n\nNotice the $|$ symbols inside the quotes following “src”. This sets the location of the cursor once the expansion is complete, allowing me to quickly type in the name of the path to the image I want to insert. Another one of those little bonus features about espanso that is just 🤌 *chef’s kiss*.\nR\nSince I use R more than any other language, I’ve come up with a lot of R-specific shortcuts. But before I dive into them, a quick side note:\nOne important modification I learned (thanks to some help on the espanso Reddit community) is that if you’re working in RStudio, the expansions don’t quite work correctly on their own (I believe it might have something to do with RStudio’s autofill feature). To fix it, I had to insert the force_clipboard: true setting into each espanso expansion. For example, in my snippet to read in a CSV file, I inserted this option between the trigger and expansion text like this:\n\n\n  - trigger: \"rrcsv\"\n    force_clipboard: true\n    replace: \"read_csv($|$)\"\n\n\n\nOkay with that in mind, I’ll highlight a few R expansions I use a lot. I’ve organized this based on my common workflow for exploring data:\nAdd a setup chunk (if working in Rmd)\nLoad libraries & data\nWrangle data\nVisualize\nAdd a setup chunk\nI usually include a “setup” chunk in most of my Rmd files, but it’s really hard to remember all the specific details for various settings, so I made a dedicated expansion just for this. With this expansion, I can insert my whole default setup chunk with rrsetup:\n  - trigger: \"rrsetup\"\n    force_clipboard: true\n    replace: |\n              ```{r setup, include=FALSE}\n              knitr::opts_chunk$set(\n                warning = FALSE,\n                message = FALSE,\n                fig.path = \"figs/\",\n                fig.width = 7.252,\n                fig.height = 4,\n                comment = \"#>\",\n                fig.retina = 3\n              )\n              ```\nLoad libraries & data\n\n\nI use some simple shortcuts to load individual libraries, like rrtidy to expand to library(tidyverse). But (as shown in the above image) I also set up an expansion to load some of my most often used libraries and settings. By typing rrstart, I get this expansion:\n\n\nlibrary(tidyverse)\nlibrary(cowplot)\noptions(dplyr.width = Inf)\n\n\n\nWith my libraries loaded, I then read in my data. I use rrcsv to expand to read_csv($|$), rrex to expand to read_excel($|$), and rrhere to expand to here::here($|$), which I use to define paths to files.\n\nSide note: if you don’t already, you should definitely try using the {here} package to define paths.\n\nWrangle data\n\n\nI usually wrangle my data using tidyverse commands, and I have come up with a few expansions for some common “pipelines”. For example, one common sequence is to do grouped summary operations. I use the rrgs (“gs” for “grouped summary”) trigger to load the code block:\n\n\n    group_by() %>%\n    summarise()\n\n\n\nLikewise, I use the rrgm trigger to load the code block for a grouped mutate:\n\n\n    group_by() %>%\n    mutate()\n\n\n\nThere are so many of these you could put together!\nVisualize\n\n\nSince {ggplot2} has such a distinct syntax, I decided to start my ggplot code snippets with gg rather than rr. Some of my favoriate {ggplot2} expansions are the scaling shortcuts:\nggsxc –> scale_x_continuous()\nggsyc –> scale_y_continuous()\nggsxd –> scale_x_discrete()\nggsyd –> scale_y_discrete()\nI also use some snippets for common geoms, like ggpoint:\n\n\nggplot() +\n    geom_point(aes(x = , y = ))\n\n\n\nand ggcol:\n\n\nggplot() +\n    geom_col(aes(x = , y = , fill = ))\n\n\n\nPaste clipboard contents as plain text\n\n\nThis is probably my favorite little hack. Often times, I want to copy-paste a snippet of text from one source to another, but when I go to paste it somewhere else, it retains all of the text formatting from the original source. My previous work around was to paste it first into a text editor (e.g. Sublime Text), then re-copy-paste it from there with the formatting now stripped away. But since espanso has support for working with your “clipboard”, I found I could simply paste the plain text by using the force_clipboard: true. I use ppp as the trigger for this:\n\n\n  - trigger: \"ppp\"\n    force_clipboard: true\n    replace: \"{{clipboard}}\"\n    vars:\n      - name: \"clipboard\"\n        type: \"clipboard\"\n\n\n\nOpen things\nYou can run terminal commands using an espanso trigger. I haven’t found too many ways to use this feature, but it is helpful for opening files or folders that may be buried deep down in some folder structure. For example, I use the :espanso trigger to open the default.yml file to edit my espanso settings:\n\n\n  - trigger: \":espanso\"\n    replace: \"{{output}}\"\n    vars:\n      - name: output\n        type: shell\n        params:\n          cmd: \"open '/Users/jhelvy/gh/espanso/espanso/default.yml'\"\n\n\n\nDates\nThese come from the espanso documentation, but they’re super useful:\n\n\n  - trigger: \":date\"\n    force_clipboard: true\n    replace: \"{{today}}\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y-%m-%d\"\n\n  - trigger: \":time\"\n    force_clipboard: true\n    replace: \"{{time}}\"\n    vars:\n      - name: time\n        type: date\n        params:\n          format: \"%H:%M\"\n\n\n\nPackages\nThere are already a lot of great espanso packages. My favorite so far is the emoji package. It’s super convenient, but I often forget the name of specific emojis, so I made another expansion to the url to an emoji cheat sheet site:\n\n\n  - trigger: \"//emo\"\n    force_clipboard: true\n    replace: \"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n\n\n\nHighlights from my default.yml file\nThanks for reading, and I hope you check out espanso! Here are some of the expansions I have come up with in my default.yml file (for now…again, I removed a few that had some personal information)\n# espanso configuration file\n\n# This is the default configuration file, change it as you like it\n# You can refer to the official documentation:\n# https://espanso.org/docs/\n\n# Matches are the substitution rules, when you type the \"trigger\" string\n# it gets replaced by the \"replace\" string.\n\nmatches:\n\n  # Sign offs\n\n  - trigger: \"cjo\"\n    force_clipboard: true\n    replace: \"Cheers,\\nJohn\"\n\n  - trigger: \"bjo\"\n    force_clipboard: true\n    replace: \"Best,\\nJohn\"\n\n  - trigger: \"rjo\"\n    force_clipboard: true\n    replace: \"Regards,\\nJohn\"\n\n  - trigger: \"cjp\"\n    force_clipboard: true\n    replace: \"Cheers,\\nJP\"\n\n  - trigger: \"cpr\"\n    force_clipboard: true\n    replace: \"Cheers,\\nProfessor Helveston\"\n\n  # URLs\n\n  - trigger: \"//emo\"\n    force_clipboard: true\n    replace: \"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n\n  - trigger: \"//dr\"\n    force_clipboard: true\n    replace: \"https://drive.google.com/drive/u/0/my-drive\"\n\n  - trigger: \"//gh\"\n    force_clipboard: true\n    replace: \"https://github.com/jhelvy/\"\n\n  - trigger: \"//jh\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/\"\n\n  - trigger: \"//talks\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/talks\"\n\n  - trigger: \"//pubs\"\n    force_clipboard: true\n    replace: \"https://jhelvy.com/publications\"\n\n  - trigger: \"//gm\"\n    force_clipboard: true\n    replace: \"https://mail.google.com/mail/u/0/\"\n\n  # GW\n\n  - trigger: \":title\"\n    force_clipboard: true\n    replace: \"Assistant Professor\"\n\n  - trigger: \":gw\"\n    force_clipboard: true\n    replace: \"George Washington University\"\n\n  - trigger: \":dept\"\n    force_clipboard: true\n    replace: \"Engineering Management and Systems Engineering\"\n\n  # Names\n\n  - trigger: \":jp\"\n    force_clipboard: true\n    replace: \"John Paul Helveston\"\n\n  - trigger: \":jh\"\n    force_clipboard: true\n    replace: \"John Helveston\"\n\n  # HTML\n\n  - trigger: \"hhimg\"\n    force_clipboard: true\n    replace: \"<center>\\n<img src=\\\"$|$\\\" width=100%>\\n<\/center>\"\n\n  - trigger: \"hhcss\"\n    force_clipboard: true\n    replace: \"<style>\\n$|$\\n<\/style>\"\n\n  - trigger: \"hhbr\"\n    force_clipboard: true\n    replace: \"<br>\"\n\n  # R\n\n  - trigger: \"rrrm\"\n    force_clipboard: true\n    replace: \"rm(list = ls())\"\n\n  - trigger: \"rrrs\"\n    force_clipboard: true\n    replace: \"rs.restartR()\"\n\n  - trigger: \"rrlib\"\n    force_clipboard: true\n    replace: \"library($|$)\"\n\n  - trigger: \"rrtidy\"\n    force_clipboard: true\n    replace: \"library(tidyverse)\\n\"\n\n  - trigger: \"rrdply\"\n    force_clipboard: true\n    replace: \"library(dplyr)\\n\"\n\n  - trigger: \"rrcow\"\n    force_clipboard: true\n    replace: \"library(cowplot)\\n\"\n\n  - trigger: \"rrops\"\n    force_clipboard: true\n    replace: \"options(dplyr.width = Inf)\\n\"\n\n  - trigger: \"rrstart\"\n    force_clipboard: true\n    replace: \"library(tidyverse)\\nlibrary(cowplot)\\noptions(dplyr.width = Inf)\\n\"\n\n  - trigger: \"rrsetup\"\n    force_clipboard: true\n    replace: |\n              ```{r setup, include=FALSE}\n              knitr::opts_chunk$set(\n                warning = FALSE,\n                message = FALSE,\n                fig.path = \"figs/\",\n                fig.width = 7.252,\n                fig.height = 4,\n                comment = \"#>\",\n                fig.retina = 3\n              )\n              ```\n\n  - trigger: \"rrcsv\"\n    force_clipboard: true\n    replace: \"read_csv($|$)\"\n\n  - trigger: \"rrex\"\n    force_clipboard: true\n    replace: \"read_excel($|$)\"\n\n  - trigger: \"rrhere\"\n    force_clipboard: true\n    replace: \"here::here($|$)\"\n\n  - trigger: \"rread\"\n    force_clipboard: true\n    replace: \"read_csv(here::here($|$))\"\n\n  - trigger: \"rrgs\"\n    force_clipboard: true\n    replace: \"group_by($|$) %>%\\n    summarise()\\n\"\n\n  - trigger: \"rrgm\"\n    force_clipboard: true\n    replace: \"group_by($|$) %>%\\n    mutate()\\n\"\n\n  - trigger: \"filterne\"\n    force_clipboard: true\n    replace: \"filter($|$ != )\"\n\n  - trigger: \"rrin\"\n    force_clipboard: true\n    replace: \" %in% \"\n\n  - trigger: \"ggsxc\"\n    force_clipboard: true\n    replace: \"scale_x_continuous($|$) +\"\n\n  - trigger: \"ggsyc\"\n    force_clipboard: true\n    replace: \"scale_y_continuous($|$) +\"\n\n  - trigger: \"ggsxd\"\n    force_clipboard: true\n    replace: \"scale_x_discrete($|$) +\"\n\n  - trigger: \"ggsyc\"\n    force_clipboard: true\n    replace: \"scale_y_discrete($|$) +\"\n\n  - trigger: \"ggex\"\n    force_clipboard: true\n    replace: \"expand = expansion(mult = c(0, 0.05))\"\n\n  - trigger: \"rrch\"\n    force_clipboard: true\n    replace: \"```{r$|$}\\n```\"\n\n  - trigger: \"rrmd\"\n    force_clipboard: true\n    replace: \"rmarkdown::render($|$)\"\n\n  - trigger: \"rrxi\"\n    force_clipboard: true\n    replace: \"xaringan::inf_mr()\"\n\n  - trigger: \"rrgg\"\n    force_clipboard: true\n    replace: \"ggplot($|$) +\\n\"\n\n  - trigger: \"ggcol\"\n    force_clipboard: true\n    replace: \"ggplot() +\\n    geom_col(aes(x = $|$, y = , fill = ))\\n\"\n\n  - trigger: \"ggpoint\"\n    force_clipboard: true\n    replace: \"ggplot() +\\n    geom_point(aes(x = $|$, y = ))\\n\"\n\n  # Dates\n\n  - trigger: \":date\"\n    force_clipboard: true\n    replace: \"{{today}}\"\n    vars:\n      - name: today\n        type: date\n        params:\n          format: \"%Y-%m-%d\"\n\n  - trigger: \":time\"\n    force_clipboard: true\n    replace: \"{{time}}\"\n    vars:\n      - name: time\n        type: date\n        params:\n          format: \"%H:%M\"\n\n  # Paste clipboard contents as plain text\n\n  - trigger: \"ppp\"\n    force_clipboard: true\n    replace: \"{{clipboard}}\"\n    vars:\n      - name: \"clipboard\"\n        type: \"clipboard\"\n\n  # Open things\n\n  - trigger: \":espanso\"\n    replace: \"{{output}}\"\n    vars:\n      - name: output\n        type: shell\n        params:\n          cmd: \"open '/Users/jhelvy/gh/espanso/espanso/default.yml'\"\n\n\n\n",
    "preview": "posts/2021-05-04-expand-your-productivity-with-espanso/images/date.gif",
    "last_modified": "2021-05-12T10:34:15+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-25-customizing-distill-with-htmltools-and-css/",
    "title": "Customizing distill with {htmltools} and CSS",
    "description": "How I added lots of little features to my distill site with the {htmltools} package, CSS, and a handful of little R functions.",
    "author": [
      {
        "name": "John Paul Helveston",
        "url": {}
      }
    ],
    "date": "2021-03-25",
    "categories": [
      "tutorial",
      "distill",
      "R"
    ],
    "contents": "\n\nContents\nFinding the html\n{htmltools} to the rescue!\nGetting organized\nHaiku research summaries\nLink “buttons” with icons + text\nSide note on academic icons\n\nFloat an image left / right with wrapped text\nFloat a single image\nFloat multiple images\n\n“Last updated on…” statement in footer\nFinal thoughts\n\n\n\nOne of the things I love about {distill} as a site builder is that it is super light weight. It comes out of the box with very few bells and whistles, enabling you to create a site from scratch in minutes. I tried using {blogdown} with the Hugo Academic theme, but in the end I found the overall configuration a bit overwhelming, even with the guidance of Alison Hill’s incredible post on how to do it (btw, if you want to make a blogdown site, you totally should read her posts on blogdown). Distill was just simpler, so I dove in.\nThat said, once I did get my distill site running, I found myself longing for some of the really cool features I’ve seen on peoples’ blogdown sites, like Alison Hill’s site (if you can’t tell, Alison’s work has been a major source of inspiration for me). But then I realized, “wait a minute…I’m working in R, and whenever I want some functionality that doesn’t yet exist, I can just write my own functions!”\nSo that’s what I set out to do - write a bunch of functions and hack away at CSS to construct the features I wanted. This post walks through my general strategy and then shows how I implemented some of the features on my site.\n\nFull disclosure: I am sure there are probably other (likely better) ways to do some of these things, but this is what I came up with and it worked for me!\n\nFinding the html\nFor every feature I wanted to add, my starting point was trying to find an example somewhere of the raw html for that feature. My knowledge of html is very limited and hacky, but I do know that if I see something I want, I can use the “inspect” tool in Chrome to grab the html by right-clicking on it and selecting “Copy element”, like this:\n\n\nWith some html in hand, I had a template to work with. My starting point was always to just drop the html directly into a page and edit it until it looked the way I wanted. But most of the time I needed to replicate and reuse that html in multiple places, so I had to find a way to write R code to generate html.\n{htmltools} to the rescue!\nLuckily, some clever folks wrote a package that generates html code! Since html controls formatting by wrapping content inside tags, the {htmltools} package uses a bunch of handy functions to generate those tags for you. For example, if I wanted to make a level 1 header tag, I could use the h1() function:\n\n\nlibrary(htmltools)\n\ncontent <- h1(\"Hello World\")\nprint(content)\n\n\n#> <h1>Hello World<\/h1>\n\nFor most situations, this works great, but there are also times where I need a tag that isn’t yet supported. In those case, you can insert the tags yourself as a string and use the tag() function to create custom tags. For example, the <aside> tag is used in distill to put content in the sidebar, but {htmltools} does not have an aside() function. Instead, I can create those tages like this:\n\n\ncontent <- tag(\"aside\", \"Hello World\")\nprint(content)\n\n\n#> <aside>Hello World<\/aside>\n\nWith this in mind, we now have just about everything we need to start writing functions to construct some html! I’ll start with a simple example of writing a function to insert some text in the sidebar.\nGetting organized\nBefore I started writing functions, I needed to find a convenient place to put them so I could use them later in my distill articles and posts. Following the typical folder structure for R packages, I decided to make a folder called “R” in the root directory of my distill site and put a file called functions.R in it. Now I can access any functions I write inside this file by calling the following at the top of any .Rmd file:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n\n\nIt’s kind of like calling library(package) at the top of a file, except your functions don’t live in a package. Eventually, I may choose to move some of my functions to an external package so others can use them, but for now they’ll live happily in my functions.R file 😄.\nHaiku research summaries\nInspired by Andrew Heiss’s research page, I wanted to insert a haiku summary next to each citation of each paper on my publications page. All you need to do is wrap some text in <aside> tags and it will show up in the side bar. But rather than write the html for each haiku (e.g. <aside>haiku text<\/aside>), I decided to write a simple function to generate the html tags for me.\nI started with three functions to generate the tags for some center-aligned text in the sidebar:\n\n\n# Generates <aside>text<\/aside>\naside <- function(text) {\n  return(htmltools::tag(\"aside\", list(text)))\n}\n\n# Generates <center>text<\/center>\ncenter <- function(text) {\n  return(htmltools::tag(\"center\", list(text)))\n}\n\n# Generates <aside><center>text<\/center><\/aside>\naside_center <- function(text) {\n  return(aside(center(list(text))))\n}\n\n\n\nNow I can insert some center-aligned text in the sidebar with the function aside_center(text). But since haikus have a particular 5-7-5 syllabic structure, I thought it would be better to put each line on a separate row. I also wanted the haikus to be in italic font. So I wrote a haiku() function that takes three text inputs and generates the html to put them in the side bar on separate lines:\n\n\nhaiku <- function(one, two, three) {\n  return(aside_center(list(\n    htmltools::em(\n      one, htmltools::br(),\n      two, htmltools::br(),\n      three)\n  )))\n}\n\n\n\nWith this little function, I can insert haikus throughout my publications page without having to write any html! For example, the html for the haiku for our recent paper in Environmental Research Letters is generated like this:\n\n\nhtml <- haiku(\n  \"A five minute ride\",\n  \"In an EV can increase\",\n  \"The chance you'll buy one\"\n)\n\nprint(html)\n\n\n#> <aside>\n#>   <center>\n#>     <em>\n#>       A five minute ride\n#>       <br/>\n#>       In an EV can increase\n#>       <br/>\n#>       The chance you'll buy one\n#>     <\/em>\n#>   <\/center>\n#> <\/aside>\n\n\nImportant caveat: For this to work, I had to insert each haiku using in-line R code, like this: `r haiku(\"one\", \"two\", \"three\")`. If I used a code chunk, the output will get wrapped in a <div>, nullifying the <aside> tags.\n\nHopefully this example gives you the gist of the general strategy of writing a function to produce the desired html. For the most part, the strategy is the same for all the other features on this post, with the exception that some require a little CSS sprinkled on top.\nLink “buttons” with icons + text\nEveryone knows that cool points are directly proportional to usage of fontawesome icons on your website. So when it came time to add links to content on my publications page, I had to find a way to make it easier to insert icons with the links. Since {htmltools} does not have a default tag for <i><\/i>, I made a function to build the tags using htmltools::tag():\n\n\n# Generates <i class=\"icon\"><\/i>\nmake_icon <- function(icon) {\n  return(htmltools::tag(\"i\", list(class = icon)))\n}\n\n\n\nI can now get an icon for any fontawesome by using it’s class. For example, I can get the GitHub icon like this:\n\n\nmake_icon(\"fab fa-github\")\n\n\n\nBecause this function just generates generic <i><\/i> tags, it works with other icon libraries too. For example, I can insert the Google Scholar icon from academic icons using make_icon(\"ai ai-google-scholar\"). Cool!\nOf course I want links that have icons + text, so I made another function to paste on the text:\n\n\nmake_icon_text <- function(icon, text) {\n  return(htmltools::HTML(paste0(make_icon(icon), \" \", text)))\n}\n\n\n\nAnd finally, to make a link, I need to make one more function using the htmltools::a() function. I also added a class I called \"icon-link\" so I could add some CSS styling later to these links:\n\n\nicon_link <- function(icon = NULL, text = NULL, url = NULL) {\n  if (!is.null(icon)) {\n    text <- make_icon_text(icon, text)\n  }\n  return(htmltools::a(href = url, text, class = \"icon-link\"))\n}\n\n\n\nBy itself, this function will produce a link with an icon and text. To make it looks more like a button (which is what I wanted), I added the following CSS in my jhelvy.css theme, which is the theme I set to all pages in my _site.yml file:\n\n.icon-link {\n    background-color: var(--color-primary);\n    color: var(--color-white);\n    padding: 3px 5px 3px 5px;\n    margin: 0 2px 0 2px;\n    border-radius: 5px; /* Rounded edges */\n}\n\n.icon-link:hover {\n    background-color: var(--color-secondary);\n    color: var(--color-white);\n}\n\n.icon-link {\n    background-color: var(--color-primary);\n    color: var(--color-white);\n    padding: 3px 5px 3px 5px;\n    margin: 0 2px 0 2px;\n    border-radius: 5px; /* Rounded edges */\n}\n\n.icon-link:hover {\n    background-color: var(--color-secondary);\n    color: var(--color-white);\n}\n\n\nNote: I use parameters throughout my css file so I can use common values, like colors, so that’s what var(--color-primary); and var(--color-secondary); are about. You can see what color values these refer to at the top of my jhelvy.css file.\n\nYou can see how these “buttons” look on my publications page. For example, the three buttons at the top are generated with this chunk in my publications.Rmd file:\n\n\nicon_link(\n    icon = \"ai ai-google-scholar\",\n    text = \"Google Scholar\",\n    url  = \"https://scholar.google.com/citations?user=DY2D56IAAAAJ\"\n)\nicon_link(\n    icon = \"ai ai-orcid\",\n    text = \"ORCID\",\n    url  = \"https://orcid.org/0000-0002-2657-9191\"\n)\nicon_link(\n    icon = \"ai ai-researchgate\",\n    text = \"Research Gate\",\n    url  = \"https://www.researchgate.net/profile/John_Helveston\"\n)\n\n\n\n\n\n Google Scholar ORCID Research Gate\n\n\nSide note on academic icons\nThe distill package supports fontawesome icons out of the box, but if you want to include academic icons you’ll need to include a link to the style sheet in the page header. You can quickly add it to all pages by making a header.html file in your root directory that contains this line:\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/jpswalsh/academicons@1/css/academicons.min.css\">\n\nThen in your _site.yml you can add it to every page by changing the output parameter:\noutput:\n  distill::distill_article:\n    includes:\n      in_header:\n      - header.html\nFloat an image left / right with wrapped text\nA very common layout I see on lots of sites is an image floated to the left or right with text wrapping around it. Here’s an example from my lab page:\n\n\nThere are probably lots of ways to do this, but a simple enough solution is to use the ::: notation to create custom divs. This isn’t needed if your output is a html_document, but for distill articles you need to create a new div that includes the image and text wrapping around it (see this issue for details as to why you have to do this).\nFloat a single image\nIf you have just a single image that you want to wrap text around, you can do it like this:\n:::float-image\n\n```{r out.width='150px', out.extra='style=\"float:left; padding:10px\"', echo=FALSE}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can name the div whatever you want - I just used float-image to be descriptive. I included all the CSS needed to float the image in the code chunk settings: out.width='150px', out.extra='style=\"float:left; padding:10px\"'. You may want to adjust the padding to fit your site’s look and feel, but this should be all you need to get the job done.\nFloat multiple images\nSince I use this layout frequently, I decided to define two classes, float-left and float-right, in my jhelvy.css theme that style any images in a div with those classes to float left or right, with a little padding:\n\n.float-left img {\n    float:left;\n    padding: 5px 10px 5px 0px;\n}\n\n.float-right img {\n    float:right;\n    padding: 5px 0px 5px 10px;\n}\n\n.float-left img {\n    float:left;\n    padding: 5px 10px 5px 0px;\n}\n\n.float-right img {\n    float:right;\n    padding: 5px 0px 5px 10px;\n}\n\nNow to float an image and wrap text around it, all I need to do is use one of those classes for the div name, and any images between the ::: marks will be floated left or right:\n:::float-left\n\n```{r, out.width='150px'}\nknitr::include_graphics(\"path/to/image\")\n```\n\nHere is some text you want to wrap around the image.\n:::\nYou can use whatever method you want to insert images, like knitr::include_graphics() or just insert direct html (which is what I actually end up doing most often).\n\nCaveat: Anything in the div created by ::: will be masked to the table of contents, so I don’t recomment wrapping a whole article inside ::: to float multiple images (though you could) and instead recommend wrapping just the elements you want to float.\n\n“Last updated on…” statement in footer\nI wanted to put a date somewhere on my site so people can see when it was last updated, and I figured the footer was a good location since it’s out of the way but still on every page (even blog posts). The thing is, {distill} generates the footer from a single, static _footer.html file in the root directory. So if I want the date to update in the footer, I have to update the _footer.html file on every build.\nNot a problem - just make a create_footer() function and call it before you build the site! My create_footer() function lives in my functions.R file, and it’s a bit long as it also inserts some icons and other text. But the main part doing the date updating is the function last_updated():\n\n\nlast_updated <- function() {\n  return(htmltools::span(\n    paste0(\n      'Last updated on ',\n      format(Sys.Date(), format=\"%B %d, %Y\")\n    ),\n    style = \"font-size:0.8rem;\")\n  )\n}\n\n\n\nThis just generates a span of the text “Last updated on {date}” with a smaller font size. I call this function inside my create_footer() function to grab the latest date, then the function write the _footer.html file to the root directory.\nTo simplify the site build, I put a build_site.R file in root directory with code to load all the functions in functions.R, create the footer, then build the site:\n\n\nsource(file.path(\"R\", \"functions.R\"))\n\n# Fist build the footer to capture today's date\ncreate_footer()\n\n# Then render the site\nrmarkdown::render_site(encoding = 'UTF-8')\n\n\n\nNow I just source build_site.R and my site builds with an updated footer to today’s date! What’s even more fun is I use a GitHub Action to automatically run build_site.R every time I commit something to the repo where my site lives and commit all the site files to my gh-pages branch. So I never have to worry about creating the footer - it’s all done automatically!\nFinal thoughts\nComing up with little solutions to each of these features was a highly iterative process, and for the most part I really wasn’t sure how to do any of this when I first got started. Each feature I added usually started by being inspired from someone else’s work, like the haiku research summaries and buttons with icons and text on Andrew Heiss’s research page. I found the process of coming up with a solution to implement each feature to be a fun way to learn new R tricks, especially in working with CSS. If you’re an R / distill / blogdown user looking to customize your site, hopefully these little examples will inspire you too!\n\n\n\n",
    "preview": "posts/2021-03-25-customizing-distill-with-htmltools-and-css/images/css_html.png",
    "last_modified": "2021-05-12T10:34:15+00:00",
    "input_file": {},
    "preview_width": 4780,
    "preview_height": 1575
  }
]
